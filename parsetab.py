
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'nonassocIFnonassocIFELSEnonassoc<>GELEEQUALNOTEQUALrightMULASSIGNDIVASSIGNSUBASSIGNADDASSIGNleft+-leftDOTADDDOTSUBleft*/leftDOTMULDOTDIVrightUMINUSleft\'ADDASSIGN BREAK CONTINUE DIVASSIGN DOTADD DOTDIV DOTMUL DOTSUB ELSE EQUAL EYE FLOATNUM FOR GE ID IF INTNUM LE LPAREN MULASSIGN NOTEQUAL ONES PRINT RETURN RPAREN STRING SUBASSIGN WHILE ZEROSinstructions : instruction\n                    | instruction instructions instruction : assigment \';\'\n                | print \';\'\n                | if_statement\n                | while_statement\n                | for_statement\n                | loop_function \';\'\n                | return \';\'\n                | \'{\' instructions \'}\' loop_function : BREAK\n                    | CONTINUE return : RETURN expression print : PRINT print_vals print_vals : string\n                    | string \',\' print_vals\n                    | expression\n                    | expression \',\' print_vals numer : INTNUM\n            | FLOATNUM num_expression : numer\n                    | var string : STRING var : ID expression : num_expression\n            | matrix\n            | matrix_function\n            | uminus\n            | transposition\n            | ref matrix : \'[\' matrix_body \']\'\n                | \'[\' vector_body \']\' matrix_body : vector\n                    | matrix_body \';\' vectorvector : vector_body vector_body : expression\n                  | vector_body \',\' expression expression : expression \'+\' expression\n            | expression \'-\' expression\n            | expression \'*\' expression\n            | expression \'/\' expression\n            | expression DOTADD expression\n            | expression DOTSUB expression\n            | expression DOTMUL expression\n            | expression DOTDIV expressioncompare_expression : expression EQUAL expression\n                | expression NOTEQUAL expression\n                | expression \'>\' expression\n                | expression \'<\' expression\n                | expression LE expression\n                | expression GE expressionuminus : \'-\' expression %prec UMINUS transposition : expression "\'" assigment_op : MULASSIGN\n                   | DIVASSIGN\n                   | SUBASSIGN\n                   | ADDASSIGN\n                   | \'=\' assigment : var assigment_op expression\n                | ref assigment_op expression matrix_function : EYE LPAREN expression RPAREN\n                  | ONES LPAREN expression RPAREN\n                  | ZEROS LPAREN expression RPARENif_statement : IF LPAREN compare_expression RPAREN instruction\n                  | IF LPAREN compare_expression RPAREN instruction ELSE instruction %prec IFELSEref : var \'[\' num_expression \',\' num_expression \']\'\n            | var \'[\' num_expression \']\' while_statement : WHILE LPAREN compare_expression RPAREN instruction for_statement : FOR var \'=\' range instruction range : expression \':\' expression '
    
_lr_action_items = {'{':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[10,10,-5,-6,-7,10,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,10,10,10,-61,-62,-63,-64,-68,-69,-66,10,-70,-65,]),'PRINT':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[13,13,-5,-6,-7,13,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,13,13,13,-61,-62,-63,-64,-68,-69,-66,13,-70,-65,]),'IF':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[14,14,-5,-6,-7,14,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,14,14,14,-61,-62,-63,-64,-68,-69,-66,14,-70,-65,]),'WHILE':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[15,15,-5,-6,-7,15,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,15,15,15,-61,-62,-63,-64,-68,-69,-66,15,-70,-65,]),'FOR':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[16,16,-5,-6,-7,16,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,16,16,16,-61,-62,-63,-64,-68,-69,-66,16,-70,-65,]),'BREAK':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[17,17,-5,-6,-7,17,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,17,17,17,-61,-62,-63,-64,-68,-69,-66,17,-70,-65,]),'CONTINUE':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[18,18,-5,-6,-7,18,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,18,18,18,-61,-62,-63,-64,-68,-69,-66,18,-70,-65,]),'RETURN':([0,2,5,6,7,10,20,22,23,24,25,39,40,41,42,43,44,46,47,52,53,58,73,74,87,90,91,92,93,94,95,96,97,98,100,105,112,113,119,120,121,122,129,130,132,133,134,135,],[19,19,-5,-6,-7,19,-24,-3,-4,-8,-9,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-10,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,19,19,19,-61,-62,-63,-64,-68,-69,-66,19,-70,-65,]),'ID':([0,2,5,6,7,10,13,16,19,20,22,23,24,25,27,28,29,30,31,32,33,34,39,40,41,42,43,44,45,46,47,48,52,53,54,55,58,63,64,65,66,67,68,69,70,71,72,73,74,79,80,81,85,86,87,90,91,92,93,94,95,96,97,98,99,100,101,105,106,107,108,109,110,111,112,113,119,120,121,122,129,130,131,132,133,134,135,],[20,20,-5,-6,-7,20,20,20,20,-24,-3,-4,-8,-9,20,20,-54,-55,-56,-57,-58,20,-25,-26,-27,-28,-29,-30,20,-21,-22,20,-19,-20,20,20,-10,20,20,20,20,20,20,20,20,20,20,-53,-52,20,20,20,20,20,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,20,-32,20,20,20,20,20,20,20,20,20,20,-61,-62,-63,-64,-68,-69,20,-66,20,-70,-65,]),'$end':([1,2,5,6,7,21,22,23,24,25,58,122,129,130,135,],[0,-1,-5,-6,-7,-2,-3,-4,-8,-9,-10,-64,-68,-69,-65,]),'}':([2,5,6,7,21,22,23,24,25,26,58,122,129,130,135,],[-1,-5,-6,-7,-2,-3,-4,-8,-9,58,-10,-64,-68,-69,-65,]),';':([3,4,8,9,17,18,20,35,36,37,38,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,75,76,77,78,87,88,89,90,91,92,93,94,95,96,97,98,100,116,117,118,119,120,121,132,],[22,23,24,25,-11,-12,-24,-14,-15,-17,-23,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-13,-59,-60,-53,-52,99,-35,-33,-36,-67,-16,-18,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-34,-35,-37,-61,-62,-63,-66,]),'ELSE':([5,6,7,22,23,24,25,58,122,129,130,135,],[-5,-6,-7,-3,-4,-8,-9,-10,133,-68,-69,-65,]),'[':([11,13,19,20,27,29,30,31,32,33,34,45,47,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[28,48,48,-24,48,-54,-55,-56,-57,-58,48,48,28,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'MULASSIGN':([11,12,20,87,132,],[29,29,-24,-67,-66,]),'DIVASSIGN':([11,12,20,87,132,],[30,30,-24,-67,-66,]),'SUBASSIGN':([11,12,20,87,132,],[31,31,-24,-67,-66,]),'ADDASSIGN':([11,12,20,87,132,],[32,32,-24,-67,-66,]),'=':([11,12,20,56,87,132,],[33,33,-24,85,-67,-66,]),'STRING':([13,63,64,],[38,38,38,]),'EYE':([13,19,27,29,30,31,32,33,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[49,49,49,-54,-55,-56,-57,-58,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'ONES':([13,19,27,29,30,31,32,33,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[50,50,50,-54,-55,-56,-57,-58,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'ZEROS':([13,19,27,29,30,31,32,33,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[51,51,51,-54,-55,-56,-57,-58,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'-':([13,19,20,27,29,30,31,32,33,34,37,39,40,41,42,43,44,45,46,47,48,52,53,54,55,57,59,62,63,64,65,66,67,68,69,70,71,72,73,74,78,79,80,81,83,85,87,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,106,107,108,109,110,111,114,118,119,120,121,123,124,125,126,127,128,131,132,134,],[45,45,-24,45,-54,-55,-56,-57,-58,45,66,-25,-26,-27,-28,-29,-30,45,-21,-22,45,-19,-20,45,45,66,66,66,45,45,45,45,45,45,45,45,45,45,-53,-52,66,45,45,45,66,45,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,45,-32,45,66,66,66,45,45,45,45,45,45,66,66,-61,-62,-63,66,66,66,66,66,66,45,-66,66,]),'INTNUM':([13,19,27,28,29,30,31,32,33,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,86,99,101,106,107,108,109,110,111,131,],[52,52,52,52,-54,-55,-56,-57,-58,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'FLOATNUM':([13,19,27,28,29,30,31,32,33,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,86,99,101,106,107,108,109,110,111,131,],[53,53,53,53,-54,-55,-56,-57,-58,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'LPAREN':([14,15,49,50,51,],[54,55,79,80,81,]),',':([20,36,37,38,39,40,41,42,43,44,46,47,52,53,60,61,73,74,76,78,87,90,91,92,93,94,95,96,97,98,100,117,118,119,120,121,132,],[-24,63,64,-23,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-22,86,-53,-52,101,-36,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,101,-37,-61,-62,-63,-66,]),'+':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,65,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,65,65,65,-53,-52,65,65,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,65,65,65,65,65,-61,-62,-63,65,65,65,65,65,65,-66,65,]),'*':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,67,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,67,67,67,-53,-52,67,67,-67,67,67,-40,-41,67,67,-44,-45,-31,-32,67,67,67,67,67,-61,-62,-63,67,67,67,67,67,67,-66,67,]),'/':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,68,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,68,68,68,-53,-52,68,68,-67,68,68,-40,-41,68,68,-44,-45,-31,-32,68,68,68,68,68,-61,-62,-63,68,68,68,68,68,68,-66,68,]),'DOTADD':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,69,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,69,69,69,-53,-52,69,69,-67,69,69,-40,-41,-42,-43,-44,-45,-31,-32,69,69,69,69,69,-61,-62,-63,69,69,69,69,69,69,-66,69,]),'DOTSUB':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,70,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,70,70,70,-53,-52,70,70,-67,70,70,-40,-41,-42,-43,-44,-45,-31,-32,70,70,70,70,70,-61,-62,-63,70,70,70,70,70,70,-66,70,]),'DOTMUL':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,71,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,71,71,71,-53,-52,71,71,-67,71,71,71,71,71,71,-44,-45,-31,-32,71,71,71,71,71,-61,-62,-63,71,71,71,71,71,71,-66,71,]),'DOTDIV':([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,72,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,72,72,72,-53,-52,72,72,-67,72,72,72,72,72,72,-44,-45,-31,-32,72,72,72,72,72,-61,-62,-63,72,72,72,72,72,72,-66,72,]),"'":([20,37,39,40,41,42,43,44,46,47,52,53,57,59,62,73,74,78,83,87,90,91,92,93,94,95,96,97,98,100,102,103,104,114,118,119,120,121,123,124,125,126,127,128,132,134,],[-24,73,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,73,73,73,-53,73,73,73,-67,73,73,73,73,73,73,73,73,-31,-32,73,73,73,73,73,-61,-62,-63,73,73,73,73,73,73,-66,73,]),']':([20,39,40,41,42,43,44,46,47,52,53,60,61,73,74,75,76,77,78,87,90,91,92,93,94,95,96,97,98,100,115,116,117,118,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-22,87,-53,-52,98,100,-33,-36,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,132,-34,-35,-37,-61,-62,-63,-66,]),'EQUAL':([20,39,40,41,42,43,44,46,47,52,53,73,74,83,87,90,91,92,93,94,95,96,97,98,100,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,106,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-61,-62,-63,-66,]),'NOTEQUAL':([20,39,40,41,42,43,44,46,47,52,53,73,74,83,87,90,91,92,93,94,95,96,97,98,100,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,107,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-61,-62,-63,-66,]),'>':([20,39,40,41,42,43,44,46,47,52,53,73,74,83,87,90,91,92,93,94,95,96,97,98,100,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,108,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-61,-62,-63,-66,]),'<':([20,39,40,41,42,43,44,46,47,52,53,73,74,83,87,90,91,92,93,94,95,96,97,98,100,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,109,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-61,-62,-63,-66,]),'LE':([20,39,40,41,42,43,44,46,47,52,53,73,74,83,87,90,91,92,93,94,95,96,97,98,100,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,110,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-61,-62,-63,-66,]),'GE':([20,39,40,41,42,43,44,46,47,52,53,73,74,83,87,90,91,92,93,94,95,96,97,98,100,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,111,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,-61,-62,-63,-66,]),'RPAREN':([20,39,40,41,42,43,44,46,47,52,53,73,74,82,84,87,90,91,92,93,94,95,96,97,98,100,102,103,104,119,120,121,123,124,125,126,127,128,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,105,112,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,119,120,121,-61,-62,-63,-46,-47,-48,-49,-50,-51,-66,]),':':([20,39,40,41,42,43,44,46,47,52,53,73,74,87,90,91,92,93,94,95,96,97,98,100,114,119,120,121,132,],[-24,-25,-26,-27,-28,-29,-30,-21,-22,-19,-20,-53,-52,-67,-38,-39,-40,-41,-42,-43,-44,-45,-31,-32,131,-61,-62,-63,-66,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'instructions':([0,2,10,],[1,21,26,]),'instruction':([0,2,10,105,112,113,133,],[2,2,2,122,129,130,135,]),'assigment':([0,2,10,105,112,113,133,],[3,3,3,3,3,3,3,]),'print':([0,2,10,105,112,113,133,],[4,4,4,4,4,4,4,]),'if_statement':([0,2,10,105,112,113,133,],[5,5,5,5,5,5,5,]),'while_statement':([0,2,10,105,112,113,133,],[6,6,6,6,6,6,6,]),'for_statement':([0,2,10,105,112,113,133,],[7,7,7,7,7,7,7,]),'loop_function':([0,2,10,105,112,113,133,],[8,8,8,8,8,8,8,]),'return':([0,2,10,105,112,113,133,],[9,9,9,9,9,9,9,]),'var':([0,2,10,13,16,19,27,28,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,86,99,101,105,106,107,108,109,110,111,112,113,131,133,],[11,11,11,47,56,47,47,60,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,60,47,47,11,47,47,47,47,47,47,11,11,47,11,]),'ref':([0,2,10,13,19,27,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,105,106,107,108,109,110,111,112,113,131,133,],[12,12,12,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,12,44,44,44,44,44,44,12,12,44,12,]),'assigment_op':([11,12,],[27,34,]),'print_vals':([13,63,64,],[35,88,89,]),'string':([13,63,64,],[36,36,36,]),'expression':([13,19,27,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[37,57,59,62,74,78,83,83,37,37,90,91,92,93,94,95,96,97,102,103,104,114,78,118,123,124,125,126,127,128,134,]),'num_expression':([13,19,27,28,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,86,99,101,106,107,108,109,110,111,131,],[39,39,39,61,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,115,39,39,39,39,39,39,39,39,39,]),'matrix':([13,19,27,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'matrix_function':([13,19,27,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'uminus':([13,19,27,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'transposition':([13,19,27,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,99,101,106,107,108,109,110,111,131,],[43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,]),'numer':([13,19,27,28,34,45,48,54,55,63,64,65,66,67,68,69,70,71,72,79,80,81,85,86,99,101,106,107,108,109,110,111,131,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'matrix_body':([48,],[75,]),'vector_body':([48,99,],[76,117,]),'vector':([48,99,],[77,116,]),'compare_expression':([54,55,],[82,84,]),'range':([85,],[113,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> instructions","S'",1,None,None,None),
  ('instructions -> instruction','instructions',1,'p_instructions','parser.py',23),
  ('instructions -> instruction instructions','instructions',2,'p_instructions','parser.py',24),
  ('instruction -> assigment ;','instruction',2,'p_instruction','parser.py',33),
  ('instruction -> print ;','instruction',2,'p_instruction','parser.py',34),
  ('instruction -> if_statement','instruction',1,'p_instruction','parser.py',35),
  ('instruction -> while_statement','instruction',1,'p_instruction','parser.py',36),
  ('instruction -> for_statement','instruction',1,'p_instruction','parser.py',37),
  ('instruction -> loop_function ;','instruction',2,'p_instruction','parser.py',38),
  ('instruction -> return ;','instruction',2,'p_instruction','parser.py',39),
  ('instruction -> { instructions }','instruction',3,'p_instruction','parser.py',40),
  ('loop_function -> BREAK','loop_function',1,'p_loop_function','parser.py',52),
  ('loop_function -> CONTINUE','loop_function',1,'p_loop_function','parser.py',53),
  ('return -> RETURN expression','return',2,'p_return','parser.py',58),
  ('print -> PRINT print_vals','print',2,'p_print','parser.py',63),
  ('print_vals -> string','print_vals',1,'p_print_vals','parser.py',68),
  ('print_vals -> string , print_vals','print_vals',3,'p_print_vals','parser.py',69),
  ('print_vals -> expression','print_vals',1,'p_print_vals','parser.py',70),
  ('print_vals -> expression , print_vals','print_vals',3,'p_print_vals','parser.py',71),
  ('numer -> INTNUM','numer',1,'p_numer','parser.py',79),
  ('numer -> FLOATNUM','numer',1,'p_numer','parser.py',80),
  ('num_expression -> numer','num_expression',1,'p_num_expression','parser.py',88),
  ('num_expression -> var','num_expression',1,'p_num_expression','parser.py',89),
  ('string -> STRING','string',1,'p_string','parser.py',96),
  ('var -> ID','var',1,'p_var','parser.py',101),
  ('expression -> num_expression','expression',1,'p_expression','parser.py',106),
  ('expression -> matrix','expression',1,'p_expression','parser.py',107),
  ('expression -> matrix_function','expression',1,'p_expression','parser.py',108),
  ('expression -> uminus','expression',1,'p_expression','parser.py',109),
  ('expression -> transposition','expression',1,'p_expression','parser.py',110),
  ('expression -> ref','expression',1,'p_expression','parser.py',111),
  ('matrix -> [ matrix_body ]','matrix',3,'p_matrix','parser.py',116),
  ('matrix -> [ vector_body ]','matrix',3,'p_matrix','parser.py',117),
  ('matrix_body -> vector','matrix_body',1,'p_matrix_body','parser.py',122),
  ('matrix_body -> matrix_body ; vector','matrix_body',3,'p_matrix_body','parser.py',123),
  ('vector -> vector_body','vector',1,'p_vector','parser.py',132),
  ('vector_body -> expression','vector_body',1,'p_vector_body','parser.py',137),
  ('vector_body -> vector_body , expression','vector_body',3,'p_vector_body','parser.py',138),
  ('expression -> expression + expression','expression',3,'p_bin_expression','parser.py',147),
  ('expression -> expression - expression','expression',3,'p_bin_expression','parser.py',148),
  ('expression -> expression * expression','expression',3,'p_bin_expression','parser.py',149),
  ('expression -> expression / expression','expression',3,'p_bin_expression','parser.py',150),
  ('expression -> expression DOTADD expression','expression',3,'p_bin_expression','parser.py',151),
  ('expression -> expression DOTSUB expression','expression',3,'p_bin_expression','parser.py',152),
  ('expression -> expression DOTMUL expression','expression',3,'p_bin_expression','parser.py',153),
  ('expression -> expression DOTDIV expression','expression',3,'p_bin_expression','parser.py',154),
  ('compare_expression -> expression EQUAL expression','compare_expression',3,'p_compare_expression','parser.py',160),
  ('compare_expression -> expression NOTEQUAL expression','compare_expression',3,'p_compare_expression','parser.py',161),
  ('compare_expression -> expression > expression','compare_expression',3,'p_compare_expression','parser.py',162),
  ('compare_expression -> expression < expression','compare_expression',3,'p_compare_expression','parser.py',163),
  ('compare_expression -> expression LE expression','compare_expression',3,'p_compare_expression','parser.py',164),
  ('compare_expression -> expression GE expression','compare_expression',3,'p_compare_expression','parser.py',165),
  ('uminus -> - expression','uminus',2,'p_uminus','parser.py',170),
  ("transposition -> expression '",'transposition',2,'p_transposition','parser.py',175),
  ('assigment_op -> MULASSIGN','assigment_op',1,'p_assigment_op','parser.py',180),
  ('assigment_op -> DIVASSIGN','assigment_op',1,'p_assigment_op','parser.py',181),
  ('assigment_op -> SUBASSIGN','assigment_op',1,'p_assigment_op','parser.py',182),
  ('assigment_op -> ADDASSIGN','assigment_op',1,'p_assigment_op','parser.py',183),
  ('assigment_op -> =','assigment_op',1,'p_assigment_op','parser.py',184),
  ('assigment -> var assigment_op expression','assigment',3,'p_assigment','parser.py',189),
  ('assigment -> ref assigment_op expression','assigment',3,'p_assigment','parser.py',190),
  ('matrix_function -> EYE LPAREN expression RPAREN','matrix_function',4,'p_matrix_function','parser.py',195),
  ('matrix_function -> ONES LPAREN expression RPAREN','matrix_function',4,'p_matrix_function','parser.py',196),
  ('matrix_function -> ZEROS LPAREN expression RPAREN','matrix_function',4,'p_matrix_function','parser.py',197),
  ('if_statement -> IF LPAREN compare_expression RPAREN instruction','if_statement',5,'p_if_statement','parser.py',201),
  ('if_statement -> IF LPAREN compare_expression RPAREN instruction ELSE instruction','if_statement',7,'p_if_statement','parser.py',202),
  ('ref -> var [ num_expression , num_expression ]','ref',6,'p_ref','parser.py',210),
  ('ref -> var [ num_expression ]','ref',4,'p_ref','parser.py',211),
  ('while_statement -> WHILE LPAREN compare_expression RPAREN instruction','while_statement',5,'p_while_statement','parser.py',219),
  ('for_statement -> FOR var = range instruction','for_statement',5,'p_for_statement','parser.py',224),
  ('range -> expression : expression','range',3,'p_range','parser.py',229),
]
